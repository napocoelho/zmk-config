/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        select_left: select_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "SELECT_LEFT";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        select_right: select_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LS(LEFT))>;
            label = "SELECT_RIGHT";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Down5x: Down5x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN>;
            label = "DOWN5X";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Up5x: Up5x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP &kp UP &kp UP &kp UP &kp UP>;
            label = "UP5X";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Enter_Abaixo: Enter_Abaixo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp ENTER>;
            label = "ENTER_ABAIXO";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Enter_Acima: Enter_Acima {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp ENTER &kp UP_ARROW>;
            label = "ENTER_ACIMA";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Left5x: Left5x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT>;
            label = "LEFT5X";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Right5x: Right5x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT>;
            label = "RIGHT5X";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        PureCaret: PureCaret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
            label = "PURECARET";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        PureSqt: PureSqt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SPACE>;
            label = "PURESQT";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        PureQuot: PureQuot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp SPACE>;
            label = "PUREQUOT";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        PureGrave: PureGrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
            label = "PUREGRAVE";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        NumFacil: Easy4Numbers {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N3 &kp N5 &kp N1 &kp N9>;
            label = "EASY4NUMBERS";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        NumMedio: NumbersMedium {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N9 &kp N1 &kp N3 &kp N7 &kp N4 &kp N5>;
            label = "NUMBERSMEDIUM";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        NumDificil: NumbersHard {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp N3 &kp N5 &kp N9 &kp N7 &kp N5 &kp N6 &kp N4>;
            label = "NUMBERSHARD";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumFacil: AlfaNumFacil {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(Z) &kp J &kp GRAVE &kp N6 &kp N1 &kp N9>;
            label = "ALFANUMFACIL";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumMedio: AlfaNumMedio {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp N1 &kp S &kp LS(A) &kp N1 &kp PRCNT &kp N9 &kp N8>;
            label = "ALFANUMMEDIO";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumDificil: AlfaNumDificil {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp N5 &kp GT &kp LS(I) &kp GT &kp LBRC &kp LT &kp RBRC &kp R &kp N6>;
            label = "ALFANUMDIFICIL";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNum1: AlfaNum1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N5 &kp LS(T) &kp N2 &kp N0 &kp N2 &kp N2 &kp AT &kp P &kp K &kp S &kp W>;
            label = "AlfaNum1";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumT: AlfaNumT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N5 &kp GT &kp LS(I) &kp O>;
            label = "ALFANUMT";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumR: AlfaNumR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp N8 &kp SEMI &kp LS(P)>;
            label = "ALFANUMR";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumF: AlfaNumF {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(P) &kp N6 &kp S &kp CARET>;
            label = "ALFANUMF";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumG: AlfaNumG {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(I) &kp T &kp DOT &kp N7>;
            label = "ALFANUMG";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumV: AlfaNumV {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N8 &kp LS(L) &kp O &kp EXCL>;
            label = "ALFANUMV";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumB: AlfaNumB {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp A &kp LS(S) &kp UNDER>;
            label = "ALFANUMB";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        PureTilde: PureTilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp SPACE>;
            label = "PURETILDE";
            wait-ms = <10>;
            tap-ms = <10>;
        };
    };

    behaviors {
        HoldLeft: HoldLeft {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDLEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 30 18 7 6 19 31 32 33 34 35 11 23 22 21 20 8 9 10 13 14 15 16 24 25 26 27 28 29 0 1 2 3 4 5 14 15 16 17 12>;
        };

        HoldRight: HoldRight {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDRIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <38 37 36 29 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 22 21 20 19 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        StickyKp: StickyKp {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKYKP";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        DanceUndoRedo: DanceUndoRedo {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCEUNDOREDO";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LC(Z)>, <&kp LC(Y)>;
        };

        SkLayer: SkLayer {
            compatible = "zmk,behavior-sticky-key";
            label = "SKLAYER";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        HoldOrTap: HoldOrTap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDORTAP";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        CapsFrase: CapsFrase {
            compatible = "zmk,behavior-caps-word";
            label = "CAPSFRASE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            continue-list = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z SPACE TILDE CARET GRAVE SINGLE_QUOTE BACKSPACE UNDERSCORE MINUS>;
        };

        CapsPalavra: CapsPalavra {
            compatible = "zmk,behavior-caps-word";
            label = "CAPSPALAVRA";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            continue-list = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z TILDE CARET GRAVE SINGLE_QUOTE BACKSPACE UNDERSCORE MINUS>;
        };

        DanceCaps: DanceCaps {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCECAPS";
            #binding-cells = <0>;
            bindings = <&StickyKp LSHIFT>, <&CapsPalavra>, <&CapsFrase>;

            tapping-term-ms = <300>;
        };

        Dance4or1: Dance4or1 {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCE4OR1";
            #binding-cells = <0>;
            bindings = <&to 4>, <&to 1>;

            tapping-term-ms = <300>;
        };

        DanceEscOrToBase: DanceEscOrToBase {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCEESCORTOBASE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&to 0>;

            tapping-term-ms = <300>;
        };

        EscOrBase: EscOrBase {
            compatible = "zmk,behavior-tap-dance";
            label = "ESCORBASE";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE>, <&to 0>;

            tapping-term-ms = <300>;
        };

        Dance1or4: Dance1or4 {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCE1OR4";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&to 1>, <&to 4>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 19>;
            layers = <0>;
            require-prior-idle-ms = <300>;
            timeout-ms = <50>;
        };

        PrintScreen {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <12 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        EnterRight {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
            layers = <0 1 2 4 5>;
        };

        EnterLeft {
            bindings = <&kp ENTER>;
            key-positions = <14 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        EnterUp {
            bindings = <&Enter_Acima>;
            key-positions = <2 3>;
            require-prior-idle-ms = <300>;
            timeout-ms = <50>;
        };

        EnterDown {
            bindings = <&Enter_Abaixo>;
            key-positions = <8 9>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
            layers = <0 1 2 4 5>;
        };

        combo_qa {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 13>;
        };

        combo_ws {
            bindings = <&kp AT>;
            key-positions = <2 14>;
        };

        combo_ed {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        combo_rf {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        combo_tg {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        combo_yh {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        combo_uj {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
        };

        combo_ik {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
        };

        combo_ol {
            bindings = <&kp LPAR>;
            key-positions = <21 9>;
        };

        combo_pcolon {
            bindings = <&kp RPAR>;
            key-positions = <10 22>;
        };

        Insert {
            bindings = <&kp INSERT>;
            key-positions = <23 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Delete1 {
            bindings = <&kp DEL>;
            key-positions = <16 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Backspace1 {
            bindings = <&kp BACKSPACE>;
            key-positions = <13 14>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Backspace2 {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Delete2 {
            bindings = <&kp DEL>;
            key-positions = <21 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Espaco1 {
            bindings = <&kp SPACE>;
            key-positions = <26 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Espaco2 {
            bindings = <&kp SPACE>;
            key-positions = <32 33>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        ToLayerConfig {
            bindings = <&mo 6>;
            key-positions = <35 34>;
            timeout-ms = <400>;
            require-prior-idle-ms = <250>;
        };

        ToLayerMeh {
            bindings = <&mo 8>;
            key-positions = <31 30>;
        };

        ToLayerHyper {
            bindings = <&mo 7>;
            key-positions = <18 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Normal {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&Dance4or1  &HoldLeft N1 Q     &HoldLeft N2 W        &HoldLeft N3 E        &HoldLeft N4 R      &HoldLeft N5 T    &HoldRight N6 Y  &HoldRight N7 U      &HoldRight N8 I        &HoldRight N9 O        &HoldRight N0 P             &Dance1or4
&SkLayer 2  &HoldLeft LCTRL A  &HoldLeft LEFT_GUI S  &HoldLeft LEFT_ALT D  &HoldLeft LSHIFT F  &kp G             &kp H            &HoldRight LSHIFT J  &HoldRight LEFT_ALT K  &HoldRight LEFT_GUI L  &HoldRight LCTRL SEMICOLON  &kp SQT
&kp ESC     &kp Z              &kp X                 &kp C                 &HoldLeft LCTRL V   &kp B             &kp N            &kp M                &kp COMMA              &kp DOT                &kp FSLH                    &kp ENTER
                                                     &lt 2 CARET           &lt 4 TAB           &SkLayer 3        &DanceCaps       &lt 1 SPACE          &lt 4 TILDE
            >;

            label = "Normal";
        };

        NavRight {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none       &kp N0                 &kp N1             &kp N2             &kp N3              &kp PERCENT     &kp LC(C)   &none         &kp HOME      &kp END        &kp LC(V)        &none
&none       &HoldLeft LCTRL MINUS  &HoldLeft LWIN N4  &HoldLeft LALT N5  &HoldLeft LSHFT N6  &kp PLUS        &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT      &StickyKp LCTRL  &none
&EscOrBase  &kp SLASH              &kp N7             &kp N8             &kp N9              &kp ASTERISK    &kp PG_UP   &select_left  &select_line  &select_right  &kp PG_DN        &kp ENTER
                                                      &kp EQUAL          &lt 5 N0            &kp ENTER       &DanceCaps  &kp SPACE     &none
            >;

            label = "NavRight";
        };

        Functions {
            bindings = <
&kp C_VOLUME_UP    &StickyKp LEFT_ALT  &kp F7  &kp F8  &kp F9   &kp F12    &none       &none            &none         &none     &none      &none
&kp C_VOLUME_DOWN  &StickyKp LCTRL     &kp F4  &kp F5  &kp F6   &kp F11    &none       &StickyKp LSHFT  &kp LEFT_ALT  &kp LWIN  &kp LCTRL  &none
&EscOrBase         &StickyKp LSHFT     &kp F1  &kp F2  &kp F3   &kp F10    &none       &none            &none         &none     &none      &kp ENTER
                                               &none   &kp TAB  &none      &DanceCaps  &none            &none
            >;

            label = "Func";
        };

        Symbols {
            bindings = <
&none       &none            &kp PLUS  &kp UNDERSCORE  &kp MINUS   &none          &kp LBKT    &kp LBRC       &kp LPAR       &kp RPAR          &kp RBRC       &kp RBKT
&none       &kp EXCLAMATION  &kp AT    &kp HASH        &kp DOLLAR  &kp PERCENT    &kp CARET   &kp AMPERSAND  &kp ASTERISK   &kp EQUAL         &kp COLON      &kp GRAVE
&EscOrBase  &none            &none     &none           &none       &none          &none       &kp PIPE       &kp LESS_THAN  &kp GREATER_THAN  &kp BACKSLASH  &kp ENTER
                                       &none           &none       &none          &PureCaret  &PureGrave     &PureTilde
            >;

            label = "Symb";
        };

        NavLeft {
            bindings = <
&none       &kp F3               &kp PG_UP            &kp UP               &mt F2 PG_DN            &none            &kp PERCENT   &kp N7               &kp N8              &kp N9              &kp N0                  &none
&none       &mt LCTRL LC(PG_UP)  &HoldLeft LWIN LEFT  &HoldLeft LALT DOWN  &HoldLeft LSHIFT RIGHT  &kp LC(PG_DN)    &kp PLUS      &HoldRight LSHFT N4  &HoldRight LALT N5  &HoldRight LWIN N6  &HoldRight LCTRL MINUS  &none
&EscOrBase  &DanceUndoRedo       &none                &none                &mt LC(C) LC(V)         &none            &kp ASTERISK  &kp N1               &kp N2              &kp N3              &kp FSLH                &kp ENTER
                                                      &none                &kp TAB                 &none            &DanceCaps    &kp N0               &kp EQUAL
            >;

            label = "NavLeft";
        };

        NavTurbo {
            label = "NavTurbo";
            bindings = <
&none    &none      &kp PG_UP     &kp PAGE_DOWN  &kp F2      &none    &none    &none         &kp HOME      &kp END        &none      &none
&kp ESC  &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT   &kp LSHIFT  &none    &Left5x  &Down5x       &Up5x         &Right5x       &kt LCTRL  &none
&none    &none      &none         &none          &none       &none    &none    &select_left  &select_line  &select_right  &none      &none
                                  &none          &none       &none    &none    &none         &none
            >;
        };

        Config {
            bindings = <
&out OUT_BLE  &out OUT_USB  &none         &none         &none         &none           &none        &none  &none  &none  &none  &none
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none        &none  &none  &none  &none  &none
&EscOrBase    &none         &none         &none         &none         &bootloader     &bootloader  &none  &none  &none  &none  &none
                                          &none         &none         &none           &none        &none  &none
            >;

            label = "CFG";
        };

        Hyper {
            bindings = <
&none       &NumFacil    &AlfaNumFacil    &AlfaNum1  &AlfaNumR  &AlfaNumT    &none  &none  &none  &none  &none  &none
&none       &NumMedio    &AlfaNumMedio    &none      &AlfaNumF  &AlfaNumG    &none  &none  &none  &none  &none  &none
&EscOrBase  &NumDificil  &AlfaNumDificil  &none      &AlfaNumV  &AlfaNumB    &none  &none  &none  &none  &none  &none
                                          &none      &none      &none        &none  &none  &none
            >;

            label = "Hyper";
        };

        Meh {
            bindings = <
&none       &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)    &none       &none  &none  &none  &none  &none
&none       &none       &none       &none       &none       &none         &none       &none  &none  &none  &none  &none
&EscOrBase  &none       &none       &none       &none       &none         &none       &none  &none  &none  &none  &none
                                    &none       &none       &none         &kp LSHIFT  &none  &none
            >;

            label = "Meh";
        };

        Atalhos {
            bindings = <
&none       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&EscOrBase  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                          &none  &none  &none    &none  &none  &none
            >;

            label = "Atalhos";
        };
    };
};
