/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE";
            wait-ms = <10>;
            tap-ms = <10>;
        };

        select_left: select_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "SELECT_LEFT";
            wait-ms = <10>;
            tap-ms = <10>;
        };

        select_right: select_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(RIGHT) &kp LC(LS(LEFT))>;
            label = "SELECT_RIGHT";
            wait-ms = <10>;
            tap-ms = <10>;
        };

        Enter_Abaixo: Enter_Abaixo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp ENTER>;
            label = "ENTER_ABAIXO";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Enter_Acima: Enter_Acima {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp ENTER &kp UP_ARROW>;
            label = "ENTER_ACIMA";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        PureCaret: PureCaret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
            label = "PURECARET";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        PureSqt: PureSqt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SPACE>;
            label = "PURESQT";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        PureQuot: PureQuot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp SPACE>;
            label = "PUREQUOT";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        PureGrave: PureGrave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
            label = "PUREGRAVE";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        NumFacil: Easy4Numbers {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N3 &kp N5 &kp N1 &kp N9>;
            label = "EASY4NUMBERS";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        NumMedio: NumbersMedium {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N9 &kp N1 &kp N3 &kp N7 &kp N4 &kp N5>;
            label = "NUMBERSMEDIUM";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        NumDificil: NumbersHard {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp N3 &kp N5 &kp N9 &kp N7 &kp N5 &kp N6 &kp N4>;
            label = "NUMBERSHARD";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumFacil: AlfaNumFacil {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(Z) &kp J &kp GRAVE &kp N6 &kp N1 &kp N9>;
            label = "ALFANUMFACIL";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumMedio: AlfaNumMedio {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp N1 &kp S &kp LS(A) &kp N1 &kp PRCNT &kp N9 &kp N8>;
            label = "ALFANUMMEDIO";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumDificil: AlfaNumDificil {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp N5 &kp GT &kp LS(I) &kp GT &kp LBRC &kp LT &kp RBRC &kp R &kp N6>;
            label = "ALFANUMDIFICIL";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNum1: AlfaNum1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N5 &kp LS(T) &kp N2 &kp N0 &kp N2 &kp N2 &kp AT &kp P &kp K &kp S &kp W>;
            label = "AlfaNum1";
            wait-ms = <10>;
            tap-ms = <20>;
        };

        AlfaNumT: AlfaNumT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N5 &kp GT &kp LS(I) &kp O>;
            label = "ALFANUMT";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumR: AlfaNumR {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp U &kp N8 &kp SEMI &kp LS(P)>;
            label = "ALFANUMR";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumF: AlfaNumF {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(P) &kp N6 &kp S &kp CARET>;
            label = "ALFANUMF";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumG: AlfaNumG {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(I) &kp T &kp DOT &kp N7>;
            label = "ALFANUMG";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumV: AlfaNumV {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N8 &kp LS(L) &kp O &kp EXCL>;
            label = "ALFANUMV";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        AlfaNumB: AlfaNumB {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp A &kp LS(S) &kp UNDER>;
            label = "ALFANUMB";
            wait-ms = <10>;
            tap-ms = <30>;
        };

        PureTilde: PureTilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp SPACE>;
            label = "PURETILDE";
            wait-ms = <10>;
            tap-ms = <10>;
        };

        xxx: xxx {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &kp LS(F16)>,
                <&macro_tap>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER &kp LS(F15)>;

            label = "XXX";
        };

        A_Crase: A_Crase {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp A>;
            label = "A_CRASE";
        };

        A_Crase_Upper: A_Crase_Upper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp LS(A)>;
            label = "A_CRASE_UPPER";
        };
    };

    behaviors {
        HoldLeft: HoldLeft {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDLEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <200>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 30 18 7 6 19 31 32 33 34 35 11 23 22 21 20 8 9 10 13 14 15 16 24 25 26 27 28 29 0 1 2 3 4 5 14 15 16 17 12>;
        };

        HoldRight: HoldRight {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDRIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <38 37 36 29 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 22 21 20 19 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        StickyKp: StickyKp {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKYKP";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        DanceUndoRedo: DanceUndoRedo {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCEUNDOREDO";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LC(Z)>, <&kp LC(Y)>;
        };

        SkLayer: SkLayer {
            compatible = "zmk,behavior-sticky-key";
            label = "SKLAYER";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
        };

        HoldOrTap: HoldOrTap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDORTAP";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        CapsFrase: CapsFrase {
            compatible = "zmk,behavior-caps-word";
            label = "CAPSFRASE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            continue-list = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z SPACE TILDE CARET GRAVE SINGLE_QUOTE BACKSPACE UNDERSCORE MINUS>;
        };

        CapsPalavra: CapsPalavra {
            compatible = "zmk,behavior-caps-word";
            label = "CAPSPALAVRA";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            continue-list = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z TILDE CARET GRAVE SINGLE_QUOTE BACKSPACE UNDERSCORE MINUS>;
        };

        DanceCaps: DanceCaps {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCECAPS";
            #binding-cells = <0>;
            bindings = <&StickyKp LSHIFT>, <&CapsPalavra>, <&CapsFrase>;

            tapping-term-ms = <300>;
        };

        Dance2or1: Dance2or1 {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCE2OR1";
            #binding-cells = <0>;
            bindings = <&to 2>, <&to 1>;

            tapping-term-ms = <300>;
        };

        DanceEscOrToBase: DanceEscOrToBase {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCEESCORTOBASE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&to 0>;

            tapping-term-ms = <300>;
        };

        EscOrBase: EscOrBase {
            compatible = "zmk,behavior-tap-dance";
            label = "ESCORBASE";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE>, <&to 0>;

            tapping-term-ms = <300>;
        };

        Dance1or2: Dance1or2 {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCE1OR2";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&to 1>, <&to 2>;
        };

        Morf_A_Crase: Morf_A_Crase {
            compatible = "zmk,behavior-mod-morph";
            label = "MORF_A_CRASE";
            bindings = <&A_Crase>, <&A_Crase_Upper>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        Virgula_PontoVirgula: Virgula_PontoVirgula {
            compatible = "zmk,behavior-mod-morph";
            label = "VIRGULA_PONTOVIRGULA";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        Ponto_DoisPontos: Ponto_DoisPontos {
            compatible = "zmk,behavior-mod-morph";
            label = "PONTO_DOISPONTOS";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        Interrogacao_Exclamacao: Interrogacao_Exclamacao {
            compatible = "zmk,behavior-mod-morph";
            label = "INTERROGACAO_EXCLAMACAO";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        HoldLayer: HoldLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDLAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        Barra_BarraInvertida: Barra_BarraInvertida {
            compatible = "zmk,behavior-mod-morph";
            label = "BARRA_BARRAINVERTIDA";
            bindings = <&kp SLASH>, <&kp BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 19>;
            layers = <0>;
            require-prior-idle-ms = <300>;
            timeout-ms = <50>;
        };

        PrintScreen {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <12 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        EnterRight {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
            layers = <0 1 2 5>;
        };

        EnterLeft {
            bindings = <&kp ENTER>;
            key-positions = <14 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        EnterUp {
            bindings = <&Enter_Acima>;
            key-positions = <2 3>;
            require-prior-idle-ms = <300>;
            timeout-ms = <50>;
        };

        EnterDown {
            bindings = <&Enter_Abaixo>;
            key-positions = <8 9>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
            layers = <0 1 2 5>;
        };

        Insert {
            bindings = <&kp INSERT>;
            key-positions = <23 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Delete1 {
            bindings = <&kp DEL>;
            key-positions = <16 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Backspace1 {
            bindings = <&kp BACKSPACE>;
            key-positions = <13 14>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Backspace2 {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Delete2 {
            bindings = <&kp DEL>;
            key-positions = <22 21>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Espaco1 {
            bindings = <&kp SPACE>;
            key-positions = <26 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Espaco2 {
            bindings = <&kp SPACE>;
            key-positions = <32 33>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        ToLayerConfig {
            bindings = <&mo 5>;
            key-positions = <35 34>;
            timeout-ms = <400>;
            require-prior-idle-ms = <250>;
        };

        ToLayerAtalhos {
            bindings = <&mo 7>;
            key-positions = <18 19>;
        };

        ToLayerKeys {
            bindings = <&mo 6>;
            key-positions = <30 31>;
        };

        ToLayerHyper {
            bindings = <&SkLayer 9>;
            key-positions = <39 40>;
        };

        ToLayerMeh {
            bindings = <&SkLayer 8>;
            key-positions = <38 37>;
        };

        CmbPgUp {
            bindings = <&kp PG_UP>;
            key-positions = <4 3>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        CmbPgDn {
            bindings = <&kp PG_DN>;
            key-positions = <28 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Normal {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp CARET  &kp Q           &HoldLeft LWIN W  &kp E              &kp R               &kp T             &kp Y       &kp U                &kp I                  &HoldRight LWIN O  &kp P                     &kp TILDE
&kp ESC    &HoldLayer 1 A  &HoldLeft LALT S  &HoldLeft LCTRL D  &HoldLeft LSHIFT F  &HoldLayer 3 G    &kp H       &HoldRight LSHIFT J  &HoldRight LCTRL K     &HoldRight LALT L  &HoldLayer 2 APOSTROPHE   &kp ENTER
&none      &kp Z           &kp X             &kp C              &HoldLeft LCTRL V   &kp B             &kp N       &kp M                &Virgula_PontoVirgula  &Ponto_DoisPontos  &Interrogacao_Exclamacao  &Barra_BarraInvertida
                                             &lt 1 CARET        &lt 2 TAB           &DanceCaps        &SkLayer 4  &lt 1 SPACE          &lt 2 TILDE
            >;

            label = "Normal";
        };

        NavRight {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none       &none                  &kp N1             &kp N2              &kp N3              &kp EQUAL                  &kp LC(Y)   &kp LC(C)     &kp HOME      &kp END        &kp LC(V)        &kp LC(Z)
&EscOrBase  &HoldLeft LCTRL MINUS  &HoldLeft LALT N4  &HoldLeft LCTRL N5  &HoldLeft LSHFT N6  &kp PLUS                   &kp LEFT    &kp DOWN      &kp UP        &kp RIGHT      &StickyKp LCTRL  &kp ENTER
&EscOrBase  &none                  &kp N7             &kp N8              &kp N9              &kp MINUS                  &kp PG_UP   &select_left  &select_line  &select_right  &kp PG_DN        &kp ENTER
                                                      &kp SLASH           &kp N0              &HoldLeft LWIN ASTERISK    &DanceCaps  &kp SPACE     &none
            >;

            label = "NavRight";
        };

        NavLeft {
            bindings = <
&none       &none          &kp PG_UP            &kp UP                &kp PG_DN               &none            &kp EQUAL                 &kp N7               &kp N8               &kp N9              &none  &none
&EscOrBase  &kp LC(PG_UP)  &HoldLeft LALT LEFT  &HoldLeft LCTRL DOWN  &HoldLeft LSHIFT RIGHT  &kp LC(PG_DN)    &kp PLUS                  &HoldRight LSHFT N4  &HoldRight LCTRL N5  &HoldRight LALT N6  &none  &kp ENTER
&EscOrBase  &none          &kp LC(X)            &kp LC(C)             &kp LC(V)               &none            &kp MINUS                 &kp N1               &kp N2               &kp N3              &none  &kp ENTER
                                                &mkp LCLK             &kp TAB                 &mkp RCLK        &HoldRight LWIN ASTERISK  &kp N0               &kp SLASH
            >;

            label = "NavLeft";
        };

        Functions {
            label = "Functions";
            bindings = <
&kp C_VOLUME_UP    &kp F5           &HoldLeft LWIN F4   &kp F3              &kp F2               &kp F1    &none   &none            &none      &kp LWIN  &none  &none
&EscOrBase         &kp F11          &HoldLeft LALT F10  &HoldLeft LCTRL F9  &HoldLeft LSHIFT F8  &kp F7    &none   &StickyKp LSHFT  &kp LCTRL  &kp LALT  &none  &kp ENTER
&kp C_VOLUME_DOWN  &StickyKp LSHFT  &none               &none               &HoldLeft LCTRL F12  &kp F6    &none   &none            &none      &none     &none  &none
                                                        &kp LS(F3)          &kp F3               &kp F2    &kp F2  &kp LS(F3)       &kp F3
            >;
        };

        Symbols {
            bindings = <
&none       &kp EXCLAMATION   &kp AT      &kp HASH    &kp DOLLAR  &kp PERCENT          &kp CARET      &kp AMPS   &kp LPAR       &kp RPAR          &none      &none
&EscOrBase  &kp LEFT_BRACKET  &kp PLUS    &kp UNDER   &kp MINUS   &kp RIGHT_BRACKET    &kp ASTERISK   &kp EQUAL  &kp LBRC       &kp RBRC          &kp COLON  &kp ENTER
&EscOrBase  &PureCaret        &PureGrave  &PureTilde  &PureSqt    &PureQuot            &kp BACKSLASH  &kp PIPE   &kp LESS_THAN  &kp GREATER_THAN  &kp SLASH  &none
                                          &none       &none       &kp EXCLAMATION      &Morf_A_Crase  &kp GRAVE  &none
            >;

            label = "Symb";
        };

        Config {
            bindings = <
&out OUT_BLE  &out OUT_USB  &none         &none         &bt BT_CLR    &none           &none        &none  &none  &none  &none  &none
&EscOrBase    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none        &none  &none  &none  &none  &none
&EscOrBase    &none         &none         &none         &none         &bootloader     &bootloader  &none  &none  &none  &none  &none
                                          &none         &none         &none           &none        &none  &none
            >;

            label = "CFG";
        };

        Keys {
            bindings = <
&none       &NumFacil    &AlfaNumFacil    &AlfaNum1  &AlfaNumR  &AlfaNumT    &none  &none  &none  &none  &none  &none
&EscOrBase  &NumMedio    &AlfaNumMedio    &none      &AlfaNumF  &AlfaNumG    &none  &none  &none  &none  &none  &none
&EscOrBase  &NumDificil  &AlfaNumDificil  &none      &AlfaNumV  &AlfaNumB    &none  &none  &none  &none  &none  &none
                                          &none      &none      &none        &none  &none  &none
            >;

            label = "Keys";
        };

        Atalhos {
            bindings = <
&none       &none       &none       &none       &none       &none         &none       &none  &none  &none  &none  &none
&EscOrBase  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)    &none       &none  &none  &none  &none  &none
&EscOrBase  &none       &none       &none       &none       &none         &none       &none  &none  &none  &none  &none
                                    &none       &none       &none         &kp LSHIFT  &none  &none
            >;

            label = "Atalhos";
        };

        Meh {
            bindings = <
&none       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&EscOrBase  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&EscOrBase  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                          &none  &none  &none    &none  &none  &none
            >;

            label = "Meh";
        };

        Hyper {
            bindings = <
&none       &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&EscOrBase  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&EscOrBase  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                          &none  &none  &none    &none  &none  &none
            >;

            label = "Hyper";
        };
    };
};
