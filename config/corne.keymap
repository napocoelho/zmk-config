/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        select_left: select_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "SELECT_LEFT";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        select_right: select_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LS(LEFT))>;
            label = "SELECT_RIGHT";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Down5x: Down5x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN>;
            label = "DOWN5X";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Up5x: Up5x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP &kp UP &kp UP &kp UP &kp UP>;
            label = "UP5X";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Enter_Abaixo: Enter_Abaixo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp ENTER>;
            label = "ENTER_ABAIXO";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Enter_Acima: Enter_Acima {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp ENTER &kp UP_ARROW>;
            label = "ENTER_ACIMA";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Left5x: Left5x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT>;
            label = "LEFT5X";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        Right5x: Right5x {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT &kp RIGHT>;
            label = "RIGHT5X";
            wait-ms = <1>;
            tap-ms = <1>;
        };
    };

    behaviors {
        HoldLeft: HoldLeft {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDLEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 30 18 7 6 19 31 32 33 34 35 11 23 22 21 20 8 9 10 13 14 15 16 24 25 26 27 28 29 0 1 2 3 4 5 14 15 16 17 12>;
        };

        HoldRight: HoldRight {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDRIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <38 37 36 29 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 22 21 20 19 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            hold-trigger-on-release;
        };

        StickyKp: StickyKp {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKYKP";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <500>;
            quick-release;
        };

        DanceUndoRedo: DanceUndoRedo {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCEUNDOREDO";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LC(Z)>, <&kp LC(Y)>;
        };

        SkLayer: SkLayer {
            compatible = "zmk,behavior-sticky-key";
            label = "SKLAYER";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <500>;
            quick-release;
        };

        ToTap: To_Tap {
            compatible = "zmk,behavior-hold-tap";
            label = "To/Tap";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        CapsFrase: CapsFrase {
            compatible = "zmk,behavior-caps-word";
            label = "CAPSFRASE";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            continue-list = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z SPACE TILDE CARET GRAVE SINGLE_QUOTE BACKSPACE UNDERSCORE>;
        };

        CapsPalavra: CapsPalavra {
            compatible = "zmk,behavior-caps-word";
            label = "CAPSPALAVRA";
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            continue-list = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z TILDE CARET GRAVE SINGLE_QUOTE BACKSPACE UNDERSCORE>;
        };

        DanceCapsLetterWordFrase: DanceCapsLetterWordFrase {
            compatible = "zmk,behavior-tap-dance";
            label = "DANCECAPSLETTERWORDFRASE";
            #binding-cells = <0>;
            bindings = <&StickyKp LSHIFT>, <&CapsPalavra>, <&CapsFrase>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <16 19>;
            layers = <0 8>;
            require-prior-idle-ms = <300>;
            timeout-ms = <50>;
        };

        PrintScreen {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <12 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        GoNumbersLayer {
            bindings = <&to 2>;
            key-positions = <38 13>;
            layers = <0 1 3>;
        };

        EnterRight {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Delete {
            bindings = <&kp DEL>;
            key-positions = <16 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        EnterLeft {
            bindings = <&kp ENTER>;
            key-positions = <14 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        GoNavLayer {
            bindings = <&to 1>;
            key-positions = <13 37>;
            layers = <0 1 3>;
        };

        EnterUp {
            bindings = <&Enter_Acima>;
            key-positions = <8 9>;
            require-prior-idle-ms = <300>;
            timeout-ms = <50>;
        };

        EnterDown {
            bindings = <&Enter_Abaixo>;
            key-positions = <32 33>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        GoFunctionLayer {
            bindings = <&to 3>;
            key-positions = <13 36>;
            layers = <0 1 3>;
        };

        EscLeft {
            bindings = <&kp ESC>;
            key-positions = <13 14>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        EscRight {
            bindings = <&kp ESC>;
            key-positions = <22 21>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        combo_qa {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 13>;
        };

        combo_ws {
            bindings = <&kp AT>;
            key-positions = <2 14>;
        };

        combo_ed {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        combo_rf {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        combo_tg {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        combo_yh {
            bindings = <&kp LCTRL>;
            key-positions = <6 18>;
        };

        combo_uj {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
        };

        combo_ik {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
        };

        combo_ol {
            bindings = <&kp LPAR>;
            key-positions = <21 9>;
        };

        combo_pcolon {
            bindings = <&kp RPAR>;
            key-positions = <10 22>;
        };

        RepeatLeft {
            bindings = <&key_repeat>;
            key-positions = <13 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        RepeatRight {
            bindings = <&key_repeat>;
            key-positions = <19 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };

        Insert {
            bindings = <&kp INSERT>;
            key-positions = <23 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&to 3    &HoldLeft EXCLAMATION Q  &HoldLeft AT_SIGN W   &HoldLeft HASH E      &HoldLeft DOLLAR R  &HoldLeft PERCENT T    &HoldRight CARET Y  &HoldRight AMPERSAND U  &HoldRight ASTERISK I  &HoldRight LPAR O      &HoldRight RPAR P           &DanceCapsLetterWordFrase
&kp ESC  &HoldLeft LCTRL A        &HoldLeft LEFT_GUI S  &HoldLeft LEFT_ALT D  &HoldLeft LSHIFT F  &kp G                  &kp H               &HoldRight LSHIFT J     &HoldRight LEFT_ALT K  &HoldRight LEFT_GUI L  &HoldRight LCTRL SEMICOLON  &ToTap 5 SINGLE_QUOTE
&to 1    &kp Z                    &kp X                 &kp C                 &HoldLeft LCTRL V   &kp B                  &kp N               &kp M                   &kp COMMA              &kp DOT                &kp FSLH                    &SkLayer 4
                                                        &lt 3 CARET           &lt 5 SPACE         &lt 4 TAB              &mt LSHFT ENTER     &lt 1 SPACE             &lt 5 TILDE
            >;

            label = "Base";
        };

        NavRight {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &none                  &kp N1             &kp N2             &kp N3              &none           &kp LC(C)  &none         &kp HOME      &kp END        &kp LC(V)        &StickyKp LSHFT
&to 0  &HoldLeft LCTRL MINUS  &HoldLeft LWIN N4  &HoldLeft LALT N5  &HoldLeft LSHFT N6  &kp PLUS        &kp LEFT   &kp DOWN      &kp UP        &kp RIGHT      &StickyKp LCTRL  &none
&none  &kp SLASH              &kp N7             &kp N8             &kp N9              &kp ASTERISK    &kp PG_UP  &select_left  &select_line  &select_right  &kp PG_DN        &none
                                                 &kp N0             &mo 6               &kp TAB         &kp ENTER  &kp SPACE     &none
            >;

            label = "NavRight";
        };

        nao_utilizado_Numbers {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&StickyKp LCTRL  &kp N1        &kp N2       &kp N3       &none       &none       &none         &kp N7                &kp N8                  &kp N9              &kp PERCENT       &StickyKp LSHFT
&to 0            &mt LCTRL N4  &mt LGUI N5  &mt LALT N6  &kp LSHIFT  &none       &kp ASTERISK  &HoldRight LSHIFT N4  &HoldRight LEFT_ALT N5  &HoldRight LGUI N6  &kp LEFT_CONTROL  &none
&kp DEL          &kp N7        &kp N8       &kp N9       &kp LCTRL   &none       &kp SLASH     &kp N1                &kp N2                  &kp N3              &none             &kp BACKSPACE
                                            &kp MINUS    &kp N0      &kp PLUS    &kp PLUS      &kp N0                &kp MINUS
            >;

            label = "Num";
        };

        Functions {
            bindings = <
&kp C_VOLUME_UP    &kp F9        &kp F10  &kp F11      &kp F12       &none    &ext_power EP_OFF  &none            &none         &none         &none         &kp INS
&to 0              &mt LCTRL F5  &kp F6   &mt LALT F7  &mt LSHFT F8  &none    &none              &StickyKp LSHFT  &kp LEFT_ALT  &kp LWIN      &kp LCTRL     &out OUT_TOG
&kp C_VOLUME_DOWN  &kp F1        &kp F2   &kp F3       &mt LCTRL F4  &none    &bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                                          &none        &none         &none    &kp LSHFT          &none            &none
            >;

            label = "Func";
        };

        Symbols {
            bindings = <
&none  &kp EXCLAMATION  &kp AT_SIGN     &kp HASH   &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK   &kp LPAR          &kp RPAR       &none
&none  &none            &kp UNDERSCORE  &kp EQUAL  &kp COLON   &none          &none      &kp LBKT       &kp LBRC       &kp RBRC          &kp RBKT       &kp GRAVE
&none  &kp PIPE         &kp MINUS       &kp PLUS   &none       &none          &none      &none          &kp LESS_THAN  &kp GREATER_THAN  &kp BACKSLASH  &none
                                        &none      &none       &none          &none      &none          &none
            >;

            label = "Symb";
        };

        NavLeft {
            bindings = <
&none    &kp F3           &kp PG_UP            &kp UP               &mt F2 PG_DN            &none      &none      &kp N7               &kp N8              &kp N9              &none                  &none
&to 0    &StickyKp LCTRL  &HoldLeft LWIN LEFT  &HoldLeft LALT DOWN  &HoldLeft LSHIFT RIGHT  &none      &kp MINUS  &HoldRight LSHFT N4  &HoldRight LALT N5  &HoldRight LWIN N6  &HoldRight LCTRL PLUS  &none
&kp DEL  &DanceUndoRedo   &none                &none                &mt LC(C) LC(V)         &none      &kp FSLH   &kp N1               &kp N2              &kp N3              &kp ASTERISK           &kp BACKSPACE
                                               &none                &kp SPACE               &kp TAB    &kp ENTER  &kp SPACE            &kp N0
            >;

            label = "NavLeft";
        };

        NavTurbo {
            label = "NavTurbo";
            bindings = <
&none  &none      &kp PG_UP     &kp PAGE_DOWN  &kp F2      &none    &none    &none         &kp HOME      &kp END        &none      &none
&none  &kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT   &kp LSHIFT  &none    &Left5x  &Down5x       &Up5x         &Right5x       &kt LCTRL  &none
&none  &none      &none         &none          &none       &none    &none    &select_left  &select_line  &select_right  &none      &none
                                &none          &none       &none    &none    &none         &none
            >;
        };

        X_Home {
            label = "Home";
            bindings = <
&mt LC(C) LC(V)  &none             &kp PG_UP      &kp UP         &mt F2 PG_DN     &to 8      &none      &kp N7        &kp N8       &kp N9       &none           &StickyKp LSHFT
&kp HOME         &kp LEFT_CONTROL  &mt LWIN LEFT  &mt LALT DOWN  &mt LSHFT RIGHT  &kp END    &kp MINUS  &mt LSHFT N4  &mt LALT N5  &mt LWIN N6  &mt LCTRL PLUS  &none
&kp DEL          &DanceUndoRedo    &none          &none          &kp LCTRL        &none      &kp SLASH  &kp N1        &kp N2       &kp N3       &kp ASTERISK    &kp BACKSPACE
                                                  &none          &kp SPACE        &kp TAB    &none      &kp N0        &none
            >;
        };

        X_Typing {
            label = "Typing";
            bindings = <
&to 7      &HoldLeft EXCLAMATION Q  &HoldLeft AT_SIGN W   &HoldLeft HASH E      &HoldLeft DOLLAR R  &HoldLeft PERCENT T    &HoldRight CARET Y  &HoldRight AMPERSAND U  &HoldRight ASTERISK I  &HoldRight LPAR O      &HoldRight RPAR P           &StickyKp LSHIFT
&lt 2 ESC  &HoldLeft LCTRL A        &HoldLeft LEFT_GUI S  &HoldLeft LEFT_ALT D  &HoldLeft LSHIFT F  &kp G                  &kp H               &HoldRight LSHIFT J     &HoldRight LEFT_ALT K  &HoldRight LEFT_GUI L  &HoldRight LCTRL SEMICOLON  &lt 2 SINGLE_QUOTE
&kp DEL    &kp Z                    &kp X                 &kp C                 &HoldLeft LCTRL V   &kp B                  &kp N               &kp M                   &kp COMMA              &kp DOT                &kp FSLH                    &kp BACKSPACE
                                                          &lt 3 CARET           &lt 5 SPACE         &lt 4 TAB              &mt LSHFT ENTER     &lt 1 SPACE             &lt 3 TILDE
            >;
        };
    };
};
